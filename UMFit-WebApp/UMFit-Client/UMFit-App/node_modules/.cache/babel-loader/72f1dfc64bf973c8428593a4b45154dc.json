{"ast":null,"code":"var _jsxFileName = \"/home/joao/Desktop/Projeto-LI4/li4_umfit/UMFit-WebApp/UMFit-Client/UMFit-App/src/pages/user/EvolucaoPage/Evolucao.tsx\";\nimport React from \"react\";\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonCard, IonCardHeader, IonCardTitle, IonGrid, IonRow, IonCol, IonList, IonItem, IonSelect, IonSelectOption, IonCardSubtitle } from \"@ionic/react\";\nimport { Line } from \"react-chartjs-2\"; //import{Line, Pie} from \"react-chartjs-2\";\n\nimport \"../css/Evolucao.css\";\nimport { getEvolucao } from \"../../../models/API/EvolucaoAPI\"; //----------------------------------------------------------------------\n//Graph settings\n\nvar generalGraphSettings = {\n  labels: [],\n  datasets: [{\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(75,192,192,0.4)',\n    borderColor: 'rgba(75,192,192,1)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(75,192,192,1)',\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 5,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 3,\n    pointHitRadius: 10,\n    data: []\n  }]\n};\n/*\n\nvar pieGraphSettings = {\n\tlabels: [ 'Massa Magra (kg)', 'Massa Gorda (kg)'],\n\tdatasets: [{ data: [], backgroundColor: ['#36A2EB', '#FF6384'],\n\t\thoverBackgroundColor: [ '#36A2EB', '#FF6384' ] }]\n};\n*/\n//----------------------------------------------------------------------\n\n//----------------------------------------------------------------------\nclass Evolucao extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = void 0;\n    this.state = {\n      peso: new Array(),\n      massaGorda: new Array(),\n      massaMagra: new Array(),\n      cintura: new Array(),\n      //default option\n      menuOpt: \"compoCorporalOption\"\n    };\n  }\n\n  async componentDidMount() {\n    await getEvolucao(\"token\").then(res => res.json()).then(jsonData => {\n      this.setState({\n        peso: jsonData.pesos,\n        cintura: jsonData.cinturas\n      });\n    });\n  }\n\n  render() {\n    //----------------------------------------------------------------------\n    const noLegend = {\n      legend: {\n        display: false\n      }\n    }; //----------------------------------------------------------------------\n\n    var xPeso = [],\n        yPeso = [];\n    this.state.peso.forEach(ref => {\n      xPeso.push(\"\" + ref.data.getMonth() + \"/\" + ref.data.getDay());\n      yPeso.push(ref.y);\n    });\n    var dataPeso = JSON.parse(JSON.stringify(generalGraphSettings));\n    dataPeso.labels = xPeso;\n    dataPeso.datasets[0].data = yPeso; //----------------------------------------------------------------------\n\n    /*\n    \n            var dataMG_MM_PIE: any = JSON.parse(JSON.stringify(pieGraphSettings));\n            dataMG_MM_PIE.datasets[0].data = [this.state.massaMagra.pop()?.y,\n                                              this.state.massaGorda.pop()?.y];\n    \n    */\n    //----------------------------------------------------------------------\n\n    var xCintura = [],\n        yCintura = [];\n    this.state.cintura.forEach(ref => {\n      xCintura.push(\"\" + ref.data.getMonth() + \"/\" + ref.data.getDay());\n      yCintura.push(ref.y);\n    });\n    var dataCintura = JSON.parse(JSON.stringify(generalGraphSettings));\n    dataCintura.labels = xCintura;\n    dataCintura.datasets[0].data = yCintura; //----------------------------------------------------------------------\n\n    var menuOp = this.state.menuOpt;\n\n    if (this.state.menuOpt !== menuOp) {\n      this.setState({\n        menuOpt: menuOp\n      });\n    } //----------------------------------------------------------------------\n\n\n    return React.createElement(IonPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(IonHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(IonToolbar, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(IonTitle, {\n      id: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Evolu\\xE7\\xE3o\"))), React.createElement(IonList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(IonItem, {\n      className: \"SelectionMenuItem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(IonSelect, {\n      value: this.state.menuOpt,\n      placeholder: \"Select One\",\n      onIonChange: e => this.setState({\n        menuOpt: e.detail.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(IonSelectOption, {\n      value: \"compoCorporalOption\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"SMlabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Composi\\xE7\\xE3o corporal\")), React.createElement(IonSelectOption, {\n      value: \"perimCorporalOption\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"SMlabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Per\\xEDmetros corporais\"))))), React.createElement(IonContent, {\n      className: \"ionContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(IonGrid, {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(IonRow, {\n      class: \"ion-justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, (() => {\n      //Apresentar diferentes menus mediante a seleção\n      switch (this.state.menuOpt) {\n        //Caso a seleção de gráficos seja composição corporal\n        case \"compoCorporalOption\":\n          return React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196\n            },\n            __self: this\n          }, React.createElement(IonCol, {\n            sizeXs: \"12\",\n            \"size-Sm\": \"12\",\n            sizeMd: \"6\",\n            sizeLg: \"6\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200\n            },\n            __self: this\n          }, React.createElement(IonCard, {\n            className: \"titleCard\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202\n            },\n            __self: this\n          }, React.createElement(IonCardHeader, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }, React.createElement(IonCardTitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"textWrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }, \"Peso\")), React.createElement(IonCardSubtitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"textWrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          }, \"(em Kg)\")))), React.createElement(\"div\", {\n            className: \"evoStats\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211\n            },\n            __self: this\n          }, React.createElement(Line, {\n            ref: \"lineChart\",\n            data: dataPeso,\n            options: noLegend,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 212\n            },\n            __self: this\n          }))));\n        //Caso a seleção de gráficos seja composição corporal\n\n        case \"perimCorporalOption\":\n          return React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225\n            },\n            __self: this\n          }, React.createElement(IonCol, {\n            sizeXs: \"12\",\n            \"size-Sm\": \"12\",\n            sizeMd: \"6\",\n            sizeLg: \"6\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 228\n            },\n            __self: this\n          }, React.createElement(IonCard, {\n            className: \"titleCard\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230\n            },\n            __self: this\n          }, React.createElement(IonCardHeader, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232\n            },\n            __self: this\n          }, React.createElement(IonCardTitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"textWrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          }, \"Cintura\")))), React.createElement(\"div\", {\n            className: \"evoStats\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238\n            },\n            __self: this\n          }, React.createElement(Line, {\n            ref: \"lineChart\",\n            data: dataCintura,\n            options: noLegend,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239\n            },\n            __self: this\n          }))));\n\n        default:\n          return React.createElement(IonCol, {\n            sizeXs: \"12\",\n            \"size-Sm\": \"12\",\n            sizeMd: \"6\",\n            sizeLg: \"6\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250\n            },\n            __self: this\n          });\n      } //close switch\n\n    } //close anonymouse function\n    )()))));\n  }\n\n}\n\nexport default Evolucao;","map":{"version":3,"sources":["/home/joao/Desktop/Projeto-LI4/li4_umfit/UMFit-WebApp/UMFit-Client/UMFit-App/src/pages/user/EvolucaoPage/Evolucao.tsx"],"names":["React","IonPage","IonHeader","IonToolbar","IonTitle","IonContent","IonCard","IonCardHeader","IonCardTitle","IonGrid","IonRow","IonCol","IonList","IonItem","IonSelect","IonSelectOption","IonCardSubtitle","Line","getEvolucao","generalGraphSettings","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","Evolucao","Component","constructor","props","state","peso","Array","massaGorda","massaMagra","cintura","menuOpt","componentDidMount","then","res","json","jsonData","setState","pesos","cinturas","render","noLegend","legend","display","xPeso","yPeso","forEach","ref","push","getMonth","getDay","y","dataPeso","JSON","parse","stringify","xCintura","yCintura","dataCintura","menuOp","e","detail","value"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonCard, IonCardHeader, IonCardTitle,  IonGrid, IonRow, IonCol, IonList, IonItem, IonSelect, IonSelectOption, IonCardSubtitle } from \"@ionic/react\";\nimport { Line } from \"react-chartjs-2\";\n//import{Line, Pie} from \"react-chartjs-2\";\n\nimport \"../css/Evolucao.css\";\nimport { getEvolucao } from \"../../../models/API/EvolucaoAPI\";\n\n//----------------------------------------------------------------------\n//Graph settings\n\nvar generalGraphSettings = { \n    labels: [],\n    datasets: [{ \n        fill: false, lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)', borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt', borderDash: [], borderDashOffset: 0.0, borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)', pointBackgroundColor: '#fff',\n        pointBorderWidth: 5, pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)', pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2, pointRadius: 3, pointHitRadius: 10, \n        data: []\n    }]\n};\n\n/*\n\nvar pieGraphSettings = {\n\tlabels: [ 'Massa Magra (kg)', 'Massa Gorda (kg)'],\n\tdatasets: [{ data: [], backgroundColor: ['#36A2EB', '#FF6384'],\n\t\thoverBackgroundColor: [ '#36A2EB', '#FF6384' ] }]\n};\n*/\n\n//----------------------------------------------------------------------\n\ninterface registoAvaliacao {\n    data: Date,\n    y: number\n}\n\n//----------------------------------------------------------------------\n\nclass Evolucao extends React.Component {\n\n    state: {\n\n        peso: Array<registoAvaliacao>\n        massaGorda: Array<registoAvaliacao>\n        massaMagra: Array<registoAvaliacao>\n\n        cintura: Array<registoAvaliacao>\n\n        menuOpt: String\n    }\n\n    constructor(props: any) {\n\n        super(props);   \n            \n        this.state = ({\n\n            peso: new Array<registoAvaliacao>(),\n            massaGorda: new Array<registoAvaliacao>(),\n            massaMagra: new Array<registoAvaliacao>(),\n\n            cintura: new Array<registoAvaliacao>(),\n            \n            //default option\n            menuOpt: \"compoCorporalOption\"\n        });\n    }\n\n    async componentDidMount() {\n\n        await getEvolucao(\"token\").then(\n            res => res.json()            \n        ).then(\n        \n            (jsonData) => {\n\n                this.setState({\n                    peso: jsonData.pesos,\n                    cintura: jsonData.cinturas\n                });\n\n            }\n\n        );\n    }\n\n    render() {\n        \n        //----------------------------------------------------------------------\n\n        const noLegend={ legend: { display: false} }; \n        \n        //----------------------------------------------------------------------\n\n        var xPeso: any[] = [], yPeso: number[] = [];\n        this.state.peso.forEach((ref)=>{\n            xPeso.push(\"\"+(ref.data.getMonth())+\"/\"+ref.data.getDay());\n            yPeso.push(ref.y);\n        });\n        var dataPeso: any = JSON.parse(JSON.stringify(generalGraphSettings));\n        dataPeso.labels = xPeso;\n        dataPeso.datasets[0].data = yPeso;\n\n        //----------------------------------------------------------------------\n\n/*\n\n        var dataMG_MM_PIE: any = JSON.parse(JSON.stringify(pieGraphSettings));\n        dataMG_MM_PIE.datasets[0].data = [this.state.massaMagra.pop()?.y,\n                                          this.state.massaGorda.pop()?.y];\n\n*/                                          \n\n        //----------------------------------------------------------------------\n\n        var xCintura : any[] = [], yCintura: number[] = [];\n        this.state.cintura.forEach((ref) => {\n            xCintura.push(\"\"+(ref.data.getMonth())+\"/\"+ref.data.getDay());\n            yCintura.push(ref.y);\n        });\n        var dataCintura: any = JSON.parse(JSON.stringify(generalGraphSettings));\n        dataCintura.labels = xCintura;\n        dataCintura.datasets[0].data = yCintura;\n\n        //----------------------------------------------------------------------\n\n        var menuOp = this.state.menuOpt;\n        \n        if(this.state.menuOpt !== menuOp) {\n\n            this.setState( { menuOpt: menuOp } )\n        } \n\n        //----------------------------------------------------------------------\n\n        return(\n\n            <IonPage>\n            \n                {/* Page title */}\n\n                <IonHeader>\n                    <IonToolbar color=\"primary\">\n                        <IonTitle id=\"page-title\">Evolução</IonTitle>\n                    </IonToolbar>\n                </IonHeader>\n            \n                {/* Menu superior para escolha de grupo de gráficos */}\n            \n                <IonList>\n                    \n                    {/*\n                    <IonListHeader>\n                        <IonLabel></IonLabel>\n                    </IonListHeader>\n                    */}\n\n                    <IonItem className=\"SelectionMenuItem\">\n    \n                            <IonSelect value={this.state.menuOpt} placeholder=\"Select One\" onIonChange={\n                                e =>this.setState( {menuOpt:e.detail.value})\n                            }>\n\n                                <IonSelectOption value=\"compoCorporalOption\"><div className=\"SMlabel\">Composição corporal</div></IonSelectOption>\n                                <IonSelectOption value=\"perimCorporalOption\"><div className=\"SMlabel\">Perímetros corporais</div></IonSelectOption>\n\n                            </IonSelect>\n                    </IonItem>\n\n                </IonList>\n\n                {/* Gráficos disponiveis */}\n\n                <IonContent className=\"ionContent\">\n                \n                <IonGrid className=\"grid\">\n\n                    <IonRow class=\"ion-justify-content-center\">\n                    \n                        {( () => {\n                            \n                            //Apresentar diferentes menus mediante a seleção\n                            switch(this.state.menuOpt) {\n                                \n                                //Caso a seleção de gráficos seja composição corporal\n                                case \"compoCorporalOption\": \n                                \n                                    return(\n\n                                        <React.Fragment>\n                                            \n                                            {/* Gráfico de Evolução do Peso */}\n\n                                            <IonCol sizeXs=\"12\" size-Sm =\"12\" sizeMd=\"6\" sizeLg=\"6\">\n\n                                                <IonCard className=\"titleCard\">\n\n                                                    <IonCardHeader>\n                                                        <IonCardTitle><div className=\"textWrapper\">Peso</div></IonCardTitle>\n                                                        <IonCardSubtitle><div className=\"textWrapper\">(em Kg)</div></IonCardSubtitle>\n                                                    </IonCardHeader>\n\n                                                </IonCard>\n\n                                                <div className=\"evoStats\">\n                                                    <Line ref=\"lineChart\" data={dataPeso} options={noLegend} />\n                                                </div>\n\n                                            </IonCol>\n\n                                        </React.Fragment>\n                                    );\n\n                                //Caso a seleção de gráficos seja composição corporal\n                                case \"perimCorporalOption\": \n                                \n                                    return(\n\n                                        <React.Fragment>\n                                            \n                                            {/* Gráfico de Evolução do Peso */}\n                                            <IonCol sizeXs=\"12\" size-Sm =\"12\" sizeMd=\"6\" sizeLg=\"6\">\n\n                                                <IonCard className=\"titleCard\">\n\n                                                    <IonCardHeader>\n                                                        <IonCardTitle><div className=\"textWrapper\">Cintura</div></IonCardTitle>\n                                                    </IonCardHeader>\n\n                                                </IonCard>\n\n                                                <div className=\"evoStats\">\n                                                    <Line ref=\"lineChart\" data={dataCintura} options={noLegend} />\n                                                </div>\n\n                                            </IonCol>\n\n                                        </React.Fragment>\n                                    );\n\n                                    default:\n                                        \n                                        return( \n                                            <IonCol sizeXs=\"12\" size-Sm =\"12\" sizeMd=\"6\" sizeLg=\"6\">\n                                            {/* Empty option */}\n                                            </IonCol>\n                                        );\n\n                            } //close switch\n\n                        } //close anonymouse function\n                    ) ()}\n\n                    </IonRow>\n\n                </IonGrid>\n\n            </IonContent>\n\n\n        </IonPage>\n        );\n    }\n\n}\n\nexport default Evolucao;"]},"metadata":{},"sourceType":"module"}