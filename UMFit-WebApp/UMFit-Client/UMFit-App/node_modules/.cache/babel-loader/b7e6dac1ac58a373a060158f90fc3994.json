{"ast":null,"code":"export {};\nexport class User {\n  constructor(email, nif, nome, genero, data_nascimento, localidade, categoria) {\n    this.email = void 0;\n    this.nif = void 0;\n    this.nome = void 0;\n    this.genero = void 0;\n    this.data_nascimento = void 0;\n    this.localidade = void 0;\n    this.categoria = void 0;\n    this.email = email;\n    this.nif = nif;\n    this.nome = nome;\n    this.genero = genero;\n    this.data_nascimento = data_nascimento;\n    this.localidade = localidade;\n    this.categoria = categoria;\n  }\n\n} //Format the result from fetch Promise<any>\n\nexport function formatUser(user) {\n  return {\n    email: user.email,\n    nif: user.nif,\n    nome: user.nome,\n    genero: user.genero,\n    data_nascimento: user.data_nascimento,\n    localidade: user.localidade,\n    categoria: user.categoria\n  };\n}\nexport function getTestValueUser() {\n  return {\n    email: \"testemail@test.pt\",\n    nif: 123456789,\n    nome: \"Joseph\",\n    genero: 1,\n    data_nascimento: \"data de nascimento\",\n    localidade: \"Rua random de Portugal\",\n    categoria: \"Premium\"\n  };\n}","map":{"version":3,"sources":["/home/joao/Desktop/Projeto-LI4/li4_umfit/UMFit-WebApp/UMFit-Client/UMFit-App/src/models/Other/User.ts"],"names":["User","constructor","email","nif","nome","genero","data_nascimento","localidade","categoria","formatUser","user","getTestValueUser"],"mappings":"AACA;AAEA,OAAO,MAAMA,IAAN,CAAW;AAUdC,EAAAA,WAAW,CAACC,KAAD,EACCC,GADD,EAECC,IAFD,EAGCC,MAHD,EAICC,eAJD,EAKCC,UALD,EAMCC,SAND,EAMoB;AAAA,SAd/BN,KAc+B;AAAA,SAb/BC,GAa+B;AAAA,SAZ/BC,IAY+B;AAAA,SAX/BC,MAW+B;AAAA,SAV/BC,eAU+B;AAAA,SAT/BC,UAS+B;AAAA,SAR/BC,SAQ+B;AAE3B,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AAzBa,C,CA4BlB;;AACA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAAqC;AAExC,SAAO;AACHR,IAAAA,KAAK,EAAEQ,IAAI,CAACR,KADT;AAEHC,IAAAA,GAAG,EAAEO,IAAI,CAACP,GAFP;AAGHC,IAAAA,IAAI,EAAEM,IAAI,CAACN,IAHR;AAIHC,IAAAA,MAAM,EAAEK,IAAI,CAACL,MAJV;AAKHC,IAAAA,eAAe,EAAEI,IAAI,CAACJ,eALnB;AAMHC,IAAAA,UAAU,EAAEG,IAAI,CAACH,UANd;AAOHC,IAAAA,SAAS,EAAEE,IAAI,CAACF;AAPb,GAAP;AASH;AAED,OAAO,SAASG,gBAAT,GAAkC;AAErC,SAAO;AACHT,IAAAA,KAAK,EAAE,mBADJ;AAEHC,IAAAA,GAAG,EAAE,SAFF;AAGHC,IAAAA,IAAI,EAAE,QAHH;AAIHC,IAAAA,MAAM,EAAE,CAJL;AAKHC,IAAAA,eAAe,EAAE,oBALd;AAMHC,IAAAA,UAAU,EAAE,wBANT;AAOHC,IAAAA,SAAS,EAAE;AAPR,GAAP;AASH","sourcesContent":["\nexport {}\n\nexport class User {\n\n    email: string;\n    nif: number;\n    nome: string;\n    genero: number;\n    data_nascimento: string;\n    localidade: string;\n    categoria: string;\n\n    constructor(email: string, \n                nif: number, \n                nome: string,\n                genero: number,\n                data_nascimento: string,\n                localidade: string,\n                categoria: string) {\n\n        this.email = email;\n        this.nif = nif;\n        this.nome = nome;\n        this.genero = genero;\n        this.data_nascimento = data_nascimento;\n        this.localidade = localidade;\n        this.categoria = categoria;\n    }\n}\n\n//Format the result from fetch Promise<any>\nexport function formatUser(user: any): User {\n    \n    return { \n        email: user.email,\n        nif: user.nif,\n        nome: user.nome,\n        genero: user.genero,\n        data_nascimento: user.data_nascimento,\n        localidade: user.localidade,\n        categoria: user.categoria\n    };\n}\n\nexport function getTestValueUser(): User {\n\n    return {\n        email: \"testemail@test.pt\",\n        nif: 123456789,\n        nome: \"Joseph\",\n        genero: 1,\n        data_nascimento: \"data de nascimento\",\n        localidade: \"Rua random de Portugal\",\n        categoria: \"Premium\" \n    }\n}"]},"metadata":{},"sourceType":"module"}